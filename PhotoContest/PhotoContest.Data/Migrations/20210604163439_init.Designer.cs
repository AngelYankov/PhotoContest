// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhotoContest.Data;

namespace PhotoContest.Data.Migrations
{
    [DbContext(typeof(PhotoContestContext))]
    [Migration("20210604163439_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1d4c48e4-8870-417b-8ac6-e78efe1aaab5"),
                            RoleId = new Guid("d0a458f4-cba3-4e49-a779-f79a9de41268")
                        },
                        new
                        {
                            UserId = new Guid("e240edfc-64b9-4358-a869-5aadb719e128"),
                            RoleId = new Guid("8a73d7c7-c092-4281-8cde-6dd9a9dd747c")
                        },
                        new
                        {
                            UserId = new Guid("5d608fdc-f7d4-40f2-b052-61a7ea812a23"),
                            RoleId = new Guid("8a73d7c7-c092-4281-8cde-6dd9a9dd747c")
                        },
                        new
                        {
                            UserId = new Guid("a890fe35-c840-4484-bd80-67dbc94ab581"),
                            RoleId = new Guid("8a73d7c7-c092-4281-8cde-6dd9a9dd747c")
                        },
                        new
                        {
                            UserId = new Guid("8a20e519-66ad-46b8-b6c3-18c36fa50a1d"),
                            RoleId = new Guid("a117e076-855e-401a-aeab-844fee43a0a2")
                        },
                        new
                        {
                            UserId = new Guid("021fa300-ffd4-48e2-a93f-d40c17d014f3"),
                            RoleId = new Guid("a117e076-855e-401a-aeab-844fee43a0a2")
                        },
                        new
                        {
                            UserId = new Guid("743f0e66-af28-48b9-8322-61395c10207f"),
                            RoleId = new Guid("a117e076-855e-401a-aeab-844fee43a0a2")
                        },
                        new
                        {
                            UserId = new Guid("71cd9097-0c95-4af2-9e43-da7324880583"),
                            RoleId = new Guid("a117e076-855e-401a-aeab-844fee43a0a2")
                        },
                        new
                        {
                            UserId = new Guid("7cc9804e-2106-4943-994d-91be3d1fab8e"),
                            RoleId = new Guid("a117e076-855e-401a-aeab-844fee43a0a2")
                        },
                        new
                        {
                            UserId = new Guid("56763358-b113-4f96-9a4a-5190c421f1fb"),
                            RoleId = new Guid("a117e076-855e-401a-aeab-844fee43a0a2")
                        },
                        new
                        {
                            UserId = new Guid("c463712b-e235-4fe5-840e-a99736c3fb76"),
                            RoleId = new Guid("a117e076-855e-401a-aeab-844fee43a0a2")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PhotoContest.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1482c268-de65-44c9-86f5-693f2cff2fac"),
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 819, DateTimeKind.Utc).AddTicks(4603),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cars"
                        },
                        new
                        {
                            Id = new Guid("729b970a-ee54-4852-8ac7-d9b3146e886b"),
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 819, DateTimeKind.Utc).AddTicks(5201),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Animals"
                        },
                        new
                        {
                            Id = new Guid("3b98decf-b63e-47c9-ba17-f5f66803cc80"),
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 819, DateTimeKind.Utc).AddTicks(5227),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nature"
                        },
                        new
                        {
                            Id = new Guid("af4ea8a0-8e69-4746-bbc8-aa4593a11828"),
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 819, DateTimeKind.Utc).AddTicks(5236),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Architecture"
                        },
                        new
                        {
                            Id = new Guid("fad09db4-8187-4777-9e68-3ba40218c7d3"),
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 819, DateTimeKind.Utc).AddTicks(5236),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Motorcycles"
                        });
                });

            modelBuilder.Entity("PhotoContest.Data.Models.Contest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Finished")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Phase1")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Phase2")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("Contests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f36e97ee-98af-4f26-93ef-066895d94b2a"),
                            CategoryId = new Guid("729b970a-ee54-4852-8ac7-d9b3146e886b"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Finished = new DateTime(2021, 6, 5, 16, 34, 38, 820, DateTimeKind.Utc).AddTicks(3660),
                            IsCalculated = false,
                            IsDeleted = false,
                            IsOpen = true,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Wild cats",
                            Phase1 = new DateTime(2021, 5, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Phase2 = new DateTime(2021, 6, 4, 16, 34, 38, 820, DateTimeKind.Utc).AddTicks(3254),
                            StatusId = new Guid("27c7d81e-eb1c-469b-8919-a532322273cc")
                        },
                        new
                        {
                            Id = new Guid("548873db-705b-46e7-b88d-230c5f06fd35"),
                            CategoryId = new Guid("fad09db4-8187-4777-9e68-3ba40218c7d3"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Finished = new DateTime(2021, 5, 26, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCalculated = false,
                            IsDeleted = false,
                            IsOpen = true,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Best look",
                            Phase1 = new DateTime(2021, 5, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Phase2 = new DateTime(2021, 5, 25, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = new Guid("27c7d81e-eb1c-469b-8919-a532322273cc")
                        },
                        new
                        {
                            Id = new Guid("42541f52-8d30-4828-bf66-4eda82735edd"),
                            CategoryId = new Guid("af4ea8a0-8e69-4746-bbc8-aa4593a11828"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Finished = new DateTime(2021, 5, 20, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCalculated = false,
                            IsDeleted = false,
                            IsOpen = true,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Best building",
                            Phase1 = new DateTime(2021, 5, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Phase2 = new DateTime(2021, 5, 20, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = new Guid("cf6bf4fb-655e-47cc-8dac-4a39cbff74b6")
                        },
                        new
                        {
                            Id = new Guid("e2450bf8-c019-4442-a2c3-ed0210586eed"),
                            CategoryId = new Guid("729b970a-ee54-4852-8ac7-d9b3146e886b"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Finished = new DateTime(2021, 6, 10, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCalculated = false,
                            IsDeleted = false,
                            IsOpen = true,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Birds",
                            Phase1 = new DateTime(2021, 6, 4, 16, 34, 38, 820, DateTimeKind.Utc).AddTicks(4336),
                            Phase2 = new DateTime(2021, 6, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = new Guid("9dd48e5a-f5f5-4b90-ad93-e0a5ad62e186")
                        });
                });

            modelBuilder.Entity("PhotoContest.Data.Models.JuryMember", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ContestId");

                    b.HasIndex("ContestId");

                    b.ToTable("Juries");
                });

            modelBuilder.Entity("PhotoContest.Data.Models.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AllPoints")
                        .HasColumnType("float");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInWrongCategory")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e165b91f-03bf-414e-88b7-c51b87775683"),
                            AllPoints = 0.0,
                            ContestId = new Guid("f36e97ee-98af-4f26-93ef-066895d94b2a"),
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 820, DateTimeKind.Utc).AddTicks(7522),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Picture of a lion.",
                            IsDeleted = false,
                            IsInWrongCategory = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoUrl = "/Images/c4baabc4-bd02-4bd6-bb33-955556530c8e_lion1.jpg",
                            Title = "Lion King",
                            UserId = new Guid("8a20e519-66ad-46b8-b6c3-18c36fa50a1d")
                        },
                        new
                        {
                            Id = new Guid("0fdb02e1-91e1-4132-9ccc-1f73c7f716b9"),
                            AllPoints = 0.0,
                            ContestId = new Guid("f36e97ee-98af-4f26-93ef-066895d94b2a"),
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 820, DateTimeKind.Utc).AddTicks(7633),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Picture of a tiger.",
                            IsDeleted = false,
                            IsInWrongCategory = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoUrl = "/Images/da80d3a0-2aaa-4360-871e-699b5507277f_tiger1.jpg",
                            Title = "Tiger",
                            UserId = new Guid("56763358-b113-4f96-9a4a-5190c421f1fb")
                        },
                        new
                        {
                            Id = new Guid("fd4b4d23-a4db-4e8b-be63-4af3c4b45757"),
                            AllPoints = 0.0,
                            ContestId = new Guid("548873db-705b-46e7-b88d-230c5f06fd35"),
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 820, DateTimeKind.Utc).AddTicks(7646),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Picture of a Kawasaki.",
                            IsDeleted = false,
                            IsInWrongCategory = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoUrl = "/Images/16bb1fa0-8f61-4717-bba1-e14f8c47b616_kawasaki1.jpg",
                            Title = "Kawasaki Ninja",
                            UserId = new Guid("021fa300-ffd4-48e2-a93f-d40c17d014f3")
                        },
                        new
                        {
                            Id = new Guid("507c5f65-497b-4a3c-95f6-cfbc86692ca5"),
                            AllPoints = 0.0,
                            ContestId = new Guid("548873db-705b-46e7-b88d-230c5f06fd35"),
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 820, DateTimeKind.Utc).AddTicks(7654),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Picture of a Honda.",
                            IsDeleted = false,
                            IsInWrongCategory = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoUrl = "/Images/dcc53eb5-2024-4242-877c-423e9c0d751f_honda1.jpg",
                            Title = "Honda CBR",
                            UserId = new Guid("c463712b-e235-4fe5-840e-a99736c3fb76")
                        },
                        new
                        {
                            Id = new Guid("59dd9540-a1d8-4360-99d5-ed8302aae5e2"),
                            AllPoints = 0.0,
                            ContestId = new Guid("e2450bf8-c019-4442-a2c3-ed0210586eed"),
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 820, DateTimeKind.Utc).AddTicks(7658),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Picture of a colibri.",
                            IsDeleted = false,
                            IsInWrongCategory = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoUrl = "/Images/3a425bea-85d7-4473-850b-afb9162dfe7e_colibri1.jpg",
                            Title = "Collibri",
                            UserId = new Guid("7cc9804e-2106-4943-994d-91be3d1fab8e")
                        },
                        new
                        {
                            Id = new Guid("94499cdd-e18c-4743-b0c4-2e1b7564c46c"),
                            AllPoints = 0.0,
                            ContestId = new Guid("e2450bf8-c019-4442-a2c3-ed0210586eed"),
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 820, DateTimeKind.Utc).AddTicks(7671),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Picture of an eagle.",
                            IsDeleted = false,
                            IsInWrongCategory = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoUrl = "/Images/1d2dfd54-7d9b-41c4-b442-995baa1ac289_eagle1.jpg",
                            Title = "Eagle",
                            UserId = new Guid("71cd9097-0c95-4af2-9e43-da7324880583")
                        });
                });

            modelBuilder.Entity("PhotoContest.Data.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("WrongCategory")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f55244de-da0f-4a9c-b8d9-7940a2f97083"),
                            Comment = "Not so great quality of the picture.",
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 821, DateTimeKind.Utc).AddTicks(591),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoId = new Guid("e165b91f-03bf-414e-88b7-c51b87775683"),
                            Score = 4.0,
                            UserId = new Guid("a890fe35-c840-4484-bd80-67dbc94ab581"),
                            WrongCategory = false
                        },
                        new
                        {
                            Id = new Guid("8198e13a-30cb-4f4b-99f0-acf31a70b02d"),
                            Comment = "Great lion.",
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 821, DateTimeKind.Utc).AddTicks(728),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoId = new Guid("e165b91f-03bf-414e-88b7-c51b87775683"),
                            Score = 8.0,
                            UserId = new Guid("e240edfc-64b9-4358-a869-5aadb719e128"),
                            WrongCategory = false
                        },
                        new
                        {
                            Id = new Guid("73fe1a7a-e31c-4b4e-a6fa-1ae65e7e1f28"),
                            Comment = "Marvelous tiger.",
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 821, DateTimeKind.Utc).AddTicks(737),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoId = new Guid("0fdb02e1-91e1-4132-9ccc-1f73c7f716b9"),
                            Score = 10.0,
                            UserId = new Guid("e240edfc-64b9-4358-a869-5aadb719e128"),
                            WrongCategory = false
                        },
                        new
                        {
                            Id = new Guid("b8e942fb-9e23-48b2-b15f-32a1e2c06315"),
                            Comment = "Skinny tiger.",
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 821, DateTimeKind.Utc).AddTicks(745),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoId = new Guid("0fdb02e1-91e1-4132-9ccc-1f73c7f716b9"),
                            Score = 3.0,
                            UserId = new Guid("5d608fdc-f7d4-40f2-b052-61a7ea812a23"),
                            WrongCategory = false
                        },
                        new
                        {
                            Id = new Guid("55cf8205-bfb9-4d8c-8ac1-7861a458bb10"),
                            Comment = "Very good colour.",
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 821, DateTimeKind.Utc).AddTicks(749),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoId = new Guid("fd4b4d23-a4db-4e8b-be63-4af3c4b45757"),
                            Score = 9.0,
                            UserId = new Guid("a890fe35-c840-4484-bd80-67dbc94ab581"),
                            WrongCategory = false
                        },
                        new
                        {
                            Id = new Guid("546ff836-f1c5-46e2-ba55-50729daf0419"),
                            Comment = "Not a very good setting.",
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 821, DateTimeKind.Utc).AddTicks(762),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhotoId = new Guid("fd4b4d23-a4db-4e8b-be63-4af3c4b45757"),
                            Score = 6.0,
                            UserId = new Guid("5d608fdc-f7d4-40f2-b052-61a7ea812a23"),
                            WrongCategory = false
                        });
                });

            modelBuilder.Entity("PhotoContest.Data.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0a458f4-cba3-4e49-a779-f79a9de41268"),
                            ConcurrencyStamp = "aa8bd828-5c26-4971-b037-6194771e1399",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("8a73d7c7-c092-4281-8cde-6dd9a9dd747c"),
                            ConcurrencyStamp = "6c8658c6-4dfc-4721-9819-5354c83aebf1",
                            Name = "Organizer",
                            NormalizedName = "ORGANIZER"
                        },
                        new
                        {
                            Id = new Guid("a117e076-855e-401a-aeab-844fee43a0a2"),
                            ConcurrencyStamp = "46c4e4ed-4198-4624-8191-728dab354d0c",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("PhotoContest.Data.Models.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9dd48e5a-f5f5-4b90-ad93-e0a5ad62e186"),
                            Name = "Phase 1"
                        },
                        new
                        {
                            Id = new Guid("27c7d81e-eb1c-469b-8919-a532322273cc"),
                            Name = "Phase 2"
                        },
                        new
                        {
                            Id = new Guid("cf6bf4fb-655e-47cc-8dac-4a39cbff74b6"),
                            Name = "Finished"
                        });
                });

            modelBuilder.Entity("PhotoContest.Data.Models.UserContest", b =>
                {
                    b.Property<Guid>("ContestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasUploadedPhoto")
                        .HasColumnType("bit");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAdded")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvited")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("ContestId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserContests");

                    b.HasData(
                        new
                        {
                            ContestId = new Guid("f36e97ee-98af-4f26-93ef-066895d94b2a"),
                            UserId = new Guid("8a20e519-66ad-46b8-b6c3-18c36fa50a1d"),
                            HasUploadedPhoto = false,
                            Id = new Guid("be9c8856-5df8-4577-a7c9-f8f62f8de22c"),
                            IsAdded = false,
                            IsInvited = false,
                            Points = 0
                        },
                        new
                        {
                            ContestId = new Guid("f36e97ee-98af-4f26-93ef-066895d94b2a"),
                            UserId = new Guid("56763358-b113-4f96-9a4a-5190c421f1fb"),
                            HasUploadedPhoto = false,
                            Id = new Guid("61f45846-09fd-4112-b3b8-5aaf029e8a9f"),
                            IsAdded = false,
                            IsInvited = false,
                            Points = 0
                        },
                        new
                        {
                            ContestId = new Guid("548873db-705b-46e7-b88d-230c5f06fd35"),
                            UserId = new Guid("021fa300-ffd4-48e2-a93f-d40c17d014f3"),
                            HasUploadedPhoto = false,
                            Id = new Guid("d00fb4ba-c05c-4a48-8042-0db3b747b226"),
                            IsAdded = false,
                            IsInvited = false,
                            Points = 0
                        },
                        new
                        {
                            ContestId = new Guid("548873db-705b-46e7-b88d-230c5f06fd35"),
                            UserId = new Guid("c463712b-e235-4fe5-840e-a99736c3fb76"),
                            HasUploadedPhoto = false,
                            Id = new Guid("f933eff8-9a79-4937-801a-a80aaa8d4b19"),
                            IsAdded = false,
                            IsInvited = false,
                            Points = 0
                        },
                        new
                        {
                            ContestId = new Guid("e2450bf8-c019-4442-a2c3-ed0210586eed"),
                            UserId = new Guid("7cc9804e-2106-4943-994d-91be3d1fab8e"),
                            HasUploadedPhoto = false,
                            Id = new Guid("1e1008e0-63f6-437a-8c86-347dcf905b7d"),
                            IsAdded = false,
                            IsInvited = false,
                            Points = 0
                        },
                        new
                        {
                            ContestId = new Guid("e2450bf8-c019-4442-a2c3-ed0210586eed"),
                            UserId = new Guid("71cd9097-0c95-4af2-9e43-da7324880583"),
                            HasUploadedPhoto = false,
                            Id = new Guid("bb047135-03e9-4957-8248-306eaf8600cc"),
                            IsAdded = false,
                            IsInvited = false,
                            Points = 0
                        });
                });

            modelBuilder.Entity("PhotoContest.Data.Rank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ranks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("acca215b-d737-406c-b87c-696fb22ce001"),
                            Name = "Junkie"
                        },
                        new
                        {
                            Id = new Guid("41c8e397-f768-48ed-b8f1-f8a238c739b1"),
                            Name = "Enthusiast"
                        },
                        new
                        {
                            Id = new Guid("a9576301-3157-454f-86ce-85bb5eb2dfc9"),
                            Name = "Master"
                        },
                        new
                        {
                            Id = new Guid("0b1728c7-5582-4958-9e97-52c9b1d44cdb"),
                            Name = "Wise and Benevolent Photo Dictator"
                        },
                        new
                        {
                            Id = new Guid("0e4ac61d-7d3b-4dcb-9ed0-d47cf1c247ce"),
                            Name = "Organizer"
                        },
                        new
                        {
                            Id = new Guid("a036e464-8996-4e40-9a81-39239cf72402"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("PhotoContest.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("OverallPoints")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("RankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RankId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d4c48e4-8870-417b-8ac6-e78efe1aaab5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "736c7f74-0bec-400d-835d-d79e0c76d1d0",
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 723, DateTimeKind.Utc).AddTicks(9855),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "Admin",
                            LockoutEnabled = true,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            OverallPoints = 0,
                            PasswordHash = "AQAAAAEAACcQAAAAEEOjMLxOdDCrTSxmYQ2fE/umbOD/yig54QiiyyyTIo4Y+NTwoLhq5+lXWtMYLek0uw==",
                            PhoneNumberConfirmed = false,
                            RankId = new Guid("a036e464-8996-4e40-9a81-39239cf72402"),
                            SecurityStamp = "DC6E275DD1E24957A7781D42BB68299B",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        },
                        new
                        {
                            Id = new Guid("e240edfc-64b9-4358-a869-5aadb719e128"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68730014-b07a-41b6-9b33-b260cf923436",
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 724, DateTimeKind.Utc).AddTicks(1804),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "eric.berg@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Eric",
                            IsDeleted = false,
                            LastName = "Berg",
                            LockoutEnabled = true,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "ERIC.BERG@MAIL.COM",
                            NormalizedUserName = "ERIC.BERG@MAIL.COM",
                            OverallPoints = 0,
                            PasswordHash = "AQAAAAEAACcQAAAAEJ6KZ915Nsv7T7YVfOVcIzMvNN79ZMX1aSmw9f/qGP19ju1OpMzrkNUKdwAEd2CJ8Q==",
                            PhoneNumberConfirmed = false,
                            RankId = new Guid("0e4ac61d-7d3b-4dcb-9ed0-d47cf1c247ce"),
                            SecurityStamp = "DC6E275DD1E24957A7781D42BB68293B",
                            TwoFactorEnabled = false,
                            UserName = "eric.berg@mail.com"
                        },
                        new
                        {
                            Id = new Guid("8a20e519-66ad-46b8-b6c3-18c36fa50a1d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "372c5b58-634b-44d8-ae3c-6ef8bf974906",
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 724, DateTimeKind.Utc).AddTicks(1839),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "georgi.ivanov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Georgi",
                            IsDeleted = false,
                            LastName = "Ivanov",
                            LockoutEnabled = true,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "GEORGI.IVANOV@MAIL.COM",
                            NormalizedUserName = "GEORGI.IVANOV@MAIL.COM",
                            OverallPoints = 0,
                            PasswordHash = "AQAAAAEAACcQAAAAEOEZ5vFCQd6J7k7TIlL/wxow55jHG70B0nLygqOKo1+r2FH7gTDQykU3M77DLo0a/w==",
                            PhoneNumberConfirmed = false,
                            RankId = new Guid("acca215b-d737-406c-b87c-696fb22ce001"),
                            SecurityStamp = "DC6E275DD1E24957A7781D42BB68292B",
                            TwoFactorEnabled = false,
                            UserName = "georgi.ivanov@mail.com"
                        },
                        new
                        {
                            Id = new Guid("021fa300-ffd4-48e2-a93f-d40c17d014f3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26c040ee-42a1-4eaa-b826-35a29b23133e",
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 724, DateTimeKind.Utc).AddTicks(1847),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.smith@mail.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            IsDeleted = false,
                            LastName = "Smith",
                            LockoutEnabled = true,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "JOHN.SMITH@MAIL.COM",
                            NormalizedUserName = "JOHN.SMITH@MAIL.COM",
                            OverallPoints = 0,
                            PasswordHash = "AQAAAAEAACcQAAAAEAqRMsbRejKadX1kmCq8mQ0GfCDWWAiDA6PYhGn2ISLNcAyFCCgp1V6yPkGr7fNwxg==",
                            PhoneNumberConfirmed = false,
                            RankId = new Guid("acca215b-d737-406c-b87c-696fb22ce001"),
                            SecurityStamp = "DC6E275DD1E25957A7781D42BB68299B",
                            TwoFactorEnabled = false,
                            UserName = "john.smith@mail.com"
                        },
                        new
                        {
                            Id = new Guid("743f0e66-af28-48b9-8322-61395c10207f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b52a7539-269e-4666-807f-481954cfcc93",
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 724, DateTimeKind.Utc).AddTicks(1856),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "steven.king@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Steven",
                            IsDeleted = false,
                            LastName = "King",
                            LockoutEnabled = true,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "STEVEN.KING@MAIL.COM",
                            NormalizedUserName = "STEVEN.KING@MAIL.COM",
                            OverallPoints = 0,
                            PasswordHash = "AQAAAAEAACcQAAAAECQ3yWKCeTJnbhzvhe1qOnMiFcUSju0I6kri+J+gm6BFQiNtA7nOaKAtpvX861W8/g==",
                            PhoneNumberConfirmed = false,
                            RankId = new Guid("acca215b-d737-406c-b87c-696fb22ce001"),
                            SecurityStamp = "DC6E375DD1E25957A7781D42BB68299B",
                            TwoFactorEnabled = false,
                            UserName = "steven.king@mail.com"
                        },
                        new
                        {
                            Id = new Guid("71cd9097-0c95-4af2-9e43-da7324880583"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3843f2f8-f545-414f-98e7-6d99be1ef47a",
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 724, DateTimeKind.Utc).AddTicks(1868),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "robert.scott@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Robert",
                            IsDeleted = false,
                            LastName = "Scott",
                            LockoutEnabled = true,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "ROBERT.SCOTT@MAIL.COM",
                            NormalizedUserName = "ROBERT.SCOTT@MAIL.COM",
                            OverallPoints = 0,
                            PasswordHash = "AQAAAAEAACcQAAAAEH1EiafMDakwI/diXntsqQDTfLnL1ta8rM04YvEBhcSh7mktZjgpoGS5HqvcTIDpbA==",
                            PhoneNumberConfirmed = false,
                            RankId = new Guid("acca215b-d737-406c-b87c-696fb22ce001"),
                            SecurityStamp = "DC6E375DD1E25957A7981D42BB68299B",
                            TwoFactorEnabled = false,
                            UserName = "robert.scott@mail.com"
                        },
                        new
                        {
                            Id = new Guid("7cc9804e-2106-4943-994d-91be3d1fab8e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dff822b6-246c-4e64-abf7-7bfbdf7c446c",
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 724, DateTimeKind.Utc).AddTicks(1877),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jimmy.brown@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Jimmy",
                            IsDeleted = false,
                            LastName = "Brown",
                            LockoutEnabled = true,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "JIMMY.BROWN@MAIL.COM",
                            NormalizedUserName = "JIMMY.BROWN@MAIL.COM",
                            OverallPoints = 0,
                            PasswordHash = "AQAAAAEAACcQAAAAEE0kAlUw8tk6Q4aqeWFycDwsKYM12LWNjmG9lbT2oPQ0BBHkoW8yn2AUD80WQMvgWw==",
                            PhoneNumberConfirmed = false,
                            RankId = new Guid("acca215b-d737-406c-b87c-696fb22ce001"),
                            SecurityStamp = "DC6E375DD1E25957A7981D42BB68399B",
                            TwoFactorEnabled = false,
                            UserName = "jimmy.brown@mail.com"
                        },
                        new
                        {
                            Id = new Guid("56763358-b113-4f96-9a4a-5190c421f1fb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad251e5d-8739-454b-9351-3a41a20409d0",
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 724, DateTimeKind.Utc).AddTicks(1886),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sam.stevens@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Sam",
                            IsDeleted = false,
                            LastName = "Stevens",
                            LockoutEnabled = true,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "SAM.STEVENS@MAIL.COM",
                            NormalizedUserName = "SAM.STEVENS@MAIL.COM",
                            OverallPoints = 200,
                            PasswordHash = "AQAAAAEAACcQAAAAEFDkEW9bu76zHuOD53vPy1AXd4N6PizVqiVKJb1kurfqwm6TFciwCLnzwxspjkJGeg==",
                            PhoneNumberConfirmed = false,
                            RankId = new Guid("a9576301-3157-454f-86ce-85bb5eb2dfc9"),
                            SecurityStamp = "DC6E375DD1E25957A7981D48BB68399B",
                            TwoFactorEnabled = false,
                            UserName = "sam.stevens@mail.com"
                        },
                        new
                        {
                            Id = new Guid("c463712b-e235-4fe5-840e-a99736c3fb76"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0ec6ccf-ed17-46fe-bc37-b8246430ff68",
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 724, DateTimeKind.Utc).AddTicks(2330),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kyle.sins@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Kyle",
                            IsDeleted = false,
                            LastName = "Sins",
                            LockoutEnabled = true,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "KYLE.SINS@MAIL.COM",
                            NormalizedUserName = "KYLE.SINS@MAIL.COM",
                            OverallPoints = 1200,
                            PasswordHash = "AQAAAAEAACcQAAAAEP72atOnQu5itKgKzK5VdECQj5aAK+3S9HU5whwR3LaJXw49ti2Ft8226kuE/44TOw==",
                            PhoneNumberConfirmed = false,
                            RankId = new Guid("0b1728c7-5582-4958-9e97-52c9b1d44cdb"),
                            SecurityStamp = "DC6E375DD2E25957A7981D48BB68399B",
                            TwoFactorEnabled = false,
                            UserName = "kyle.sins@mail.com"
                        },
                        new
                        {
                            Id = new Guid("5d608fdc-f7d4-40f2-b052-61a7ea812a23"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e807adde-c9d7-486d-a9a8-09073bbfa7d7",
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 724, DateTimeKind.Utc).AddTicks(2373),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sara.smith@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Sara",
                            IsDeleted = false,
                            LastName = "Smith",
                            LockoutEnabled = true,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "SARA.SMITH@MAIL.COM",
                            NormalizedUserName = "SARA.SMITH@MAIL.COM",
                            OverallPoints = 0,
                            PasswordHash = "AQAAAAEAACcQAAAAELbaAKrqBtJDjtbnUG935xhWVtxrOjesPtNTtuIQsWKnaBcbLp+qpOAGmtOu8quK+w==",
                            PhoneNumberConfirmed = false,
                            RankId = new Guid("0e4ac61d-7d3b-4dcb-9ed0-d47cf1c247ce"),
                            SecurityStamp = "DC6E275DD1E24917A7781D42BB68293B",
                            TwoFactorEnabled = false,
                            UserName = "sara.smith@mail.com"
                        },
                        new
                        {
                            Id = new Guid("a890fe35-c840-4484-bd80-67dbc94ab581"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eebcebb6-0ab9-4962-aac2-0d3fae2878ee",
                            CreatedOn = new DateTime(2021, 6, 4, 16, 34, 38, 724, DateTimeKind.Utc).AddTicks(2382),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.beck@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            IsDeleted = false,
                            LastName = "Beck",
                            LockoutEnabled = true,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "JANE.BECK@MAIL.COM",
                            NormalizedUserName = "JANE.BECK@MAIL.COM",
                            OverallPoints = 0,
                            PasswordHash = "AQAAAAEAACcQAAAAEMlrll21IbaACUSj2EQScwKHNjNN9arzLEVLhRAKQ/ibRrcovfT3vPOvPBSPgVzTfw==",
                            PhoneNumberConfirmed = false,
                            RankId = new Guid("0e4ac61d-7d3b-4dcb-9ed0-d47cf1c247ce"),
                            SecurityStamp = "DC6E275DD1E24917A7781D42BB64293B",
                            TwoFactorEnabled = false,
                            UserName = "jane.beck@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("PhotoContest.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PhotoContest.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PhotoContest.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("PhotoContest.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoContest.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PhotoContest.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhotoContest.Data.Models.Contest", b =>
                {
                    b.HasOne("PhotoContest.Data.Models.Category", "Category")
                        .WithMany("Contests")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotoContest.Data.Models.Status", "Status")
                        .WithMany("Contests")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("PhotoContest.Data.Models.JuryMember", b =>
                {
                    b.HasOne("PhotoContest.Data.Models.Contest", "Contest")
                        .WithMany("Juries")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotoContest.Data.User", "User")
                        .WithMany("Juries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("PhotoContest.Data.Models.Photo", b =>
                {
                    b.HasOne("PhotoContest.Data.Models.Contest", "Contest")
                        .WithMany("Photos")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotoContest.Data.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("PhotoContest.Data.Models.Review", b =>
                {
                    b.HasOne("PhotoContest.Data.Models.Photo", "Photo")
                        .WithMany("Reviews")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotoContest.Data.User", "Evaluator")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("PhotoContest.Data.Models.UserContest", b =>
                {
                    b.HasOne("PhotoContest.Data.Models.Contest", "Contest")
                        .WithMany("UserContests")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotoContest.Data.User", "User")
                        .WithMany("UserContests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("PhotoContest.Data.User", b =>
                {
                    b.HasOne("PhotoContest.Data.Rank", "Rank")
                        .WithMany("Users")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
